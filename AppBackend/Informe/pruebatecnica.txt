-------------------------------------------------------------------------------
Informe de Pruebas T√©cnicas: Complejidad Temporal y Espacial
-------------------------------------------------------------------------------

Las siguientes pruebas corresponden a la funci√≥n:
void cargarDatosInicialesPruebaTecnica(const std::string &path)

Se midieron los tiempos de ejecuci√≥n de las operaciones principales sobre las estructuras Hash, MaxHeap y AVL, as√≠ como el uso de memoria impl√≠cito en cada una.

-------------------------------------------------------------------------------
Resultados de pruebas (1000 usuarios)
-------------------------------------------------------------------------------

[Hash] Insertar 1000 usuarios: 0.4286 ms
[Hash] Buscar/Validar 1000 usuarios (no existen): 0.1188 ms (encontrados: 0)
[Heap] Insertar 1000 usuarios (siguiendo logica /cola): 0.3427 ms
[Heap] Cambiar prioridad aleatoria a todos los usuarios (1000): 0.7836 ms
[Heap] verTop5 ejecutado, usuarios devueltos: 5, tiempo: 11.2 us
  DNI: 10000001, prioridad: 5, ts: 1720411399
  DNI: 10000064, prioridad: 5, ts: 1720417201
  DNI: 10000006, prioridad: 5, ts: 1720412723
  DNI: 10000129, prioridad: 5, ts: 1720436538
  DNI: 10000080, prioridad: 5, ts: 1720409828
[Heap] ExtraerMax 1000 usuarios: 0.0848 ms
[AVL] Insertar 1000 accesos: 0.4225 ms
[AVL] Consulta rango (1720406400 - 1720490280) [2024-07-08 02:40:00 - 2024-07-09 01:58:00]: 28 us, resultados: 1000
Servidor escuchando en http://localhost:18080

-------------------------------------------------------------------------------
Resultados de pruebas (2000 usuarios)
-------------------------------------------------------------------------------

[Hash] Insertar 2000 usuarios: 0.7366 ms
[Hash] Buscar/Validar 2000 usuarios (no existen): 0.184 ms (encontrados: 0)
[Heap] Insertar 2000 usuarios (siguiendo logica /cola): 0.7156 ms
[Heap] Cambiar prioridad aleatoria a todos los usuarios (2000): 2.0437 ms
[Heap] verTop5 ejecutado, usuarios devueltos: 5, tiempo: 15.9 us
  DNI: 10000016, prioridad: 5, ts: 1720413508
  DNI: 10000131, prioridad: 5, ts: 1720417031
  DNI: 10000771, prioridad: 5, ts: 1720409795
  DNI: 10001031, prioridad: 5, ts: 1720410631
  DNI: 10000642, prioridad: 5, ts: 1720414101
[Heap] ExtraerMax 2000 usuarios: 0.1555 ms
[AVL] Insertar 2000 accesos: 0.8044 ms
[AVL] Consulta rango (1720406400 - 1720574340) [2024-07-08 02:40:00 - 2024-07-10 01:19:00]: 51.4 us, resultados: 2000
Servidor escuchando en http://localhost:18080

-------------------------------------------------------------------------------
Resultados de pruebas (3000 usuarios)
-------------------------------------------------------------------------------

[Hash] Insertar 3000 usuarios: 1.2567 ms
[Hash] Buscar/Validar 3000 usuarios (no existen): 0.3207 ms (encontrados: 0)
[Heap] Insertar 3000 usuarios (siguiendo logica /cola): 1.0345 ms
[Heap] Cambiar prioridad aleatoria a todos los usuarios (3000): 4.9319 ms
[Heap] verTop5 ejecutado, usuarios devueltos: 5, tiempo: 35.8 us
  DNI: 10000001, prioridad: 5, ts: 1720411758
  DNI: 10000011, prioridad: 5, ts: 1720436636
  DNI: 10000391, prioridad: 5, ts: 1720436209
  DNI: 10000016, prioridad: 5, ts: 1720434004
  DNI: 10000320, prioridad: 5, ts: 1720433883
[Heap] ExtraerMax 3000 usuarios: 0.2869 ms
[AVL] Insertar 3000 accesos: 1.3329 ms
[AVL] Consulta rango (1720406460 - 1720658220) [2024-07-08 02:41:00 - 2024-07-11 00:37:00]: 79.6 us, resultados: 3000
Servidor escuchando en http://localhost:18080

-------------------------------------------------------------------------------
Resultados de pruebas (4000 usuarios)
-------------------------------------------------------------------------------
[Hash] Insertar 4000 usuarios: 1.668 ms
[Hash] Buscar/Validar 4000 usuarios (no existen): 0.4634 ms (encontrados: 0)
[Heap] Insertar 4000 usuarios (siguiendo logica /cola): 1.3582 ms
[Heap] Cambiar prioridad aleatoria a todos los usuarios (4000): 8.1748 ms
[Heap] verTop5 ejecutado, usuarios devueltos: 5, tiempo: 35.7 us
  DNI: 10000001, prioridad: 5, ts: 1720411912
  DNI: 10000011, prioridad: 5, ts: 1720429684
  DNI: 10000006, prioridad: 5, ts: 1720406628
  DNI: 10000064, prioridad: 5, ts: 1720435035
  DNI: 10000021, prioridad: 5, ts: 1720417346
[Heap] ExtraerMax 4000 usuarios: 0.3747 ms
[AVL] Insertar 4000 accesos: 1.9595 ms
[AVL] Consulta rango (1720406400 - 1720742340) [2024-07-08 02:40:00 - 2024-07-11 23:59:00]: 228.2 us, resultados: 4000
Servidor escuchando en http://localhost:18080

-------------------------------------------------------------------------------
Resultados de pruebas (5000 usuarios)
-------------------------------------------------------------------------------

[Hash] Insertar 5000 usuarios: 1.6819 ms
[Hash] Buscar/Validar 5000 usuarios (no existen): 0.5486 ms (encontrados: 0)
[Heap] Insertar 5000 usuarios (siguiendo logica /cola): 1.7299 ms
[Heap] Cambiar prioridad aleatoria a todos los usuarios (5000): 10.9556 ms
[Heap] verTop5 ejecutado, usuarios devueltos: 5, tiempo: 58.7 us
  DNI: 10000256, prioridad: 5, ts: 1720411047
  DNI: 10001026, prioridad: 5, ts: 1720407767
  DNI: 10000026, prioridad: 5, ts: 1720409076
  DNI: 10000512, prioridad: 5, ts: 1720424775
  DNI: 10001286, prioridad: 5, ts: 1720409649
[Heap] ExtraerMax 5000 usuarios: 0.4261 ms
[AVL] Insertar 5000 accesos: 2.1992 ms
[AVL] Consulta rango (1720406460 - 1720826340) [2024-07-08 02:41:00 - 2024-07-12 23:19:00]: 146.7 us, resultados: 4999
Servidor escuchando en http://localhost:18080

-------------------------------------------------------------------------------
Notas:
- Los tiempos pueden variar levemente seg√∫n la m√°quina y carga del sistema.
- La tabla hash y el heap muestran tiempos lineales y logar√≠tmicos respectivamente, como se espera.
- El AVL, tras la optimizaci√≥n de altura, mantiene O(log n) en inserci√≥n y O(k + log n) en consultas de rango.
- No se detect√≥ crecimiento cuadr√°tico en ninguna estructura.
-------------------------------------------------------------------------------
An√°lisis de Complejidad Observada
-------------------------------------------------------------------------------

üü¶ Tabla Hash
Inserci√≥n/B√∫squeda:
Los tiempos son casi constantes respecto al tama√±o de los datos. Esto confirma la complejidad O(1) promedio gracias a:
- Funci√≥n hash eficiente.
- Encadenamiento separado para colisiones.
- Rehashing controlado al superar el factor de carga.
‚úÖ Escala muy bien incluso para 5‚ÄØ000 usuarios.

üü© MaxHeap
Inserci√≥n y extracci√≥n:
Tiempos crecientes pero consistentes con la complejidad O(log n) esperada.
Cambio de prioridad:
Es O(log n) por operaci√≥n. Para n usuarios, el tiempo total es O(n log n).
verTop5:
Muy r√°pido, confirmando la eficiencia en accesos parciales.
‚úÖ Operaciones eficientes y escalables.

üüß √Årbol AVL
Inserci√≥n:
Tiempos crecen ligeramente con n, coherentes con la complejidad te√≥rica O(log n).
Consulta de Rango:
Tiempos extremadamente bajos incluso para 5‚ÄØ000 accesos (146 us). Esto valida O(k + log n).
‚úÖ Eficiente para consultas.
‚ö†Ô∏è Para inserciones masivas podr√≠a ser a√∫n m√°s √≥ptimo si se implementara bulk-loading.

-------------------------------------------------------------------------------
6. Tabla de Complejidades de Operaciones
-------------------------------------------------------------------------------
| Operaci√≥n           | Tiempo Promedio | Peor Caso | Espacio    |
|---------------------|-----------------|-----------|------------|
| insertar            | O(log n)        | O(log n)  | O(n)       |
| rangoTiempos        | O(k + log n)    | O(n)      | O(k)       |
| zonaMasEntradas     | O(n)            | O(n)      | O(n)       |
| mostrar             | O(n)            | O(n)      | O(n)       |
| contarZonas         | O(n)            | O(n)      | O(n)       |
| rangoRec            | O(k + log n)    | O(n)      | O(k)       |
| buscarIndice        | O(n)            | O(n)      | O(1)       |
| heapifyDown         | O(log n)        | O(log n)  | O(1)       |
| heapifyUp           | O(log n)        | O(log n)  | O(1)       |
| expandir            | O(n)            | O(n)      | O(n)       |
-------------------------------------------------------------------------------










